E_INT, E_FLOAT, E_STR = "INT", "FLOAT", "STR"

#
# class SomeObject:
#     def __init__(self):
#         self.integer_field = 0
#         self.float_field = 0.0
#         self.string_field = ""
#

# создаёт событие изменения поля типа type(<value>)

class EventSet:
    def __init__(self, val):
        self.kind = {int: E_INT, float: E_FLOAT, str: E_STR}[type(val)]
        self.prop = val


class EventGet:
    def __init__(self, val):
        self.kind = {int: E_INT, float: E_FLOAT, str: E_STR}[val]
        self.prop = None


class NullHandler:
    def __init__(self, seccessor=None):
        self.__seccessor = seccessor

    def handle(self, obj, event):
        if self.__seccessor is not None:
            return self.__seccessor.handle(obj, event)


class IntHandler(NullHandler):
    def handle(self, obj, event):
        if event.kind == E_INT:
            if event.prop is None:
                return obj.integer_field
            else:
                obj.integer_field = event.prop
        else:
            print("int" , super().handle(obj, event))
            return super().handle(obj, event)


class FloatHandler(NullHandler):
    def handle(self, obj, event):
        if event.kind == E_FLOAT:
            if event.prop is None:
                return obj.float_field
            else:
                obj.float_field = event.prop
        else:
            print("float" , super().handle(obj, event))
            return super().handle(obj, event)


class StrHandler(NullHandler):
    def handle(self, obj, event):
        if event.kind == E_STR:
            if event.prop is None:
                return obj.string_field
            else:
                obj.string_field = event.prop
        else:
            print("str", super().handle(obj, event))
            return super().handle(obj, event)


# obj = SomeObject()
# obj.integer_field = 42
# obj.float_field = 3.14
# obj.string_field = "some text"
#
#
# chain = IntHandler(FloatHandler(StrHandler(NullHandler)))
# print(chain.handle(obj, EventGet(int)))
# # 42
#
# print(chain.handle(obj, EventGet(float)))
# # 3.14
# print(chain.handle(obj, EventGet(str)))
# # 'some text'
# print(chain.handle(obj, EventSet(100)))
# print(chain.handle(obj, EventGet(int)))
# # 100
# print(chain.handle(obj, EventSet(0.5)))
# print(chain.handle(obj, EventGet(float)))
# # 0.5
# print(chain.handle(obj, EventSet('new text')))
# print(chain.handle(obj, EventGet(str)))
# # 'new text'
# #
# # kind = {int: E_INT, float: E_FLOAT, str: E_STR}[type(2)];
# # print({int: E_INT, float: E_FLOAT, str: E_STR}[type(2)])
